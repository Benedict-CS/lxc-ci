name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGISTRY_DOMAIN: registry.benedicttiong.site
  IMAGE_NAME: test-service
  API_HOST: 140.113.194.249 # 建議將此 IP 也放入 Secret
  DEVICE_ID: "test-1"
  TOKEN: ""

jobs:
  #====================================================
  # CI Job: Build and Push Docker Image (你的版本)
  #====================================================
  CI-Pipeline:
    name: CI-Pipeline
    runs-on: ubuntu-latest
    outputs:
      IMAGE_URL: ${{ steps.meta.outputs.IMAGE_URL }}
      IMAGE_TAG: ${{ steps.meta.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Generate Image Metadata
        id: meta
        run: |
          VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IMAGE_URL=${{ env.REGISTRY_DOMAIN }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "Generated Tag: $VERSION"

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.IMAGE_URL }}:${{ steps.meta.outputs.VERSION }}
          provenance: false

  #====================================================
  # CD Job: Deploy to Device via USP Controller
  #====================================================
  CD-Pipeline:
    name: CD-Pipeline
    # needs: CI-Pipeline
    runs-on: ubuntu-latest

    steps:
      - name: 1. Get Authentication Token and Set Env Var
        id: auth
        run: |
          # 步驟 A: 執行 curl 並將結果存入一個 *臨時的 Shell 變數*
          TEMP_TOKEN=$(curl --location --request PUT 'http://${{ env.API_HOST }}/api/auth/login' \
            --header 'Content-Type: application/json' \
            --verbose \ # 保留 verbose 以便除錯
            --fail \ # <-- 新增：如果 HTTP 狀態碼不是 2xx，curl 會直接失敗退出
            --data-raw '{
                "email": "test@gmail.com",
                "password": "test"
            }' | tee /dev/stderr | tr -d '"')
            
          CURL_EXIT_CODE=$? # 取得 curl 的結束代碼
          echo "Raw curl output processed. Exit code: $CURL_EXIT_CODE" 
            
          # 步驟 B: 檢查 curl 是否成功以及 Token 是否為空
          if [ $CURL_EXIT_CODE -ne 0 ] || [ -z "$TEMP_TOKEN" ]; then
            echo "::error::Failed to retrieve authentication token. Curl exit code: $CURL_EXIT_CODE. Check secrets, API connectivity, or curl output above."
            exit 1
          fi
          
          # 步驟 C: 將成功的 Token 寫入 GITHUB_ENV
          echo "Successfully retrieved auth token (masked)."
          echo "::add-mask::$TEMP_TOKEN" # 遮罩 Token
          echo "TOKEN=$TEMP_TOKEN" >> $GITHUB_ENV # <--- 寫入 GITHUB_ENV

      # --- 後續步驟可以像這樣直接使用 $TOKEN ---
      - name: 2. (測試) Show Token
        run: |
          echo "Token from GITHUB_ENV: $TOKEN" 
          # 在你的 Uninstall 和 Install 步驟中，就可以直接用 $TOKEN 或 ${TOKEN} 了
          # 例如： --header "Authorization: ${TOKEN}"