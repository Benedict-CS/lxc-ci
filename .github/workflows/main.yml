name: Build and Deploy mywebapp

on:
  push:
    branches:
      - main

env:
  REGISTRY_DOMAIN: registry.benedicttiong.site
  IMAGE_NAME: mywebapp

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      IMAGE_URL: ${{ steps.vars.outputs.IMAGE_URL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate Version and Image URL
        id: vars
        run: |
          VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          IMAGE_URL="${{ env.REGISTRY_DOMAIN }}/${{ env.IMAGE_NAME }}:$VERSION"
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_OUTPUT
          LOCAL_TAG="${{ env.IMAGE_NAME }}:$VERSION"
          echo "LOCAL_TAG=$LOCAL_TAG" >> $GITHUB_OUTPUT

      - name: Step 1 - Build Image and Load to local Docker
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -t ${{ steps.vars.outputs.LOCAL_TAG }} \
            --provenance=false \
            --load .

      - name: Step 2 - Tag Image for Registry
        run: |
          docker tag ${{ steps.vars.outputs.LOCAL_TAG }} ${{ steps.vars.outputs.IMAGE_URL }}

      - name: Step 3 - Push Image to Registry
        run: |
          docker push ${{ steps.vars.outputs.IMAGE_URL }}

  deploy-to-prplos:
    name: Deploy to prplOS
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: 1. Install SSH client (Optimized)
        run: sudo apt-get install -y sshpass

      - name: 2. Deploy via Phoenix Strategy (Uninstall + Install)
        env:
          SSH_HOST: ${{ secrets.PRPLOS_PUBLIC_HOST }}
          SSH_USER: ${{ secrets.PRPLOS_USER }}
          SSH_PASS: ${{ secrets.PRPLOS_PASSWORD }}
          IMAGE_URL: ${{ needs.build-and-push.outputs.IMAGE_URL }}
        run: |
          REMOTE_SCRIPT="
          echo '--- Step 1: Uninstalling all existing containers ---';
          ubus-cli 'SoftwareModules.DeploymentUnit.*.Uninstall()' || true;
          
          echo '--- Step 2: Installing new container ---';
          RND=\$(cat /proc/sys/kernel/random/uuid);
          PREFIX=\$(echo \"\$RND\" | cut -c 1-14);
          SUFFIX=\$(echo \"\$RND\" | cut -c 16-);
          UUID_V5=\"\${PREFIX}5\${SUFFIX}\";
          echo \"Generated UUID: \$UUID_V5\";
          
          ubus-cli \"SoftwareModules.InstallDU(URL=\\\"docker://${IMAGE_URL}\\\", UUID=\\\"\$UUID_V5\\\", ExecutionEnvRef=\\\"generic\\\", NetworkConfig={ \\\"AccessInterfaces\\\" = [{\\\"Reference\\\" = \\\"Lan\\\"}] }, \\\"Privileged\\\"=true)\";
          
          echo '--- Step 3: Verifying deployment ---';
          sleep 5; 
          lxc-ls -f;
          "
          sshpass -p "${SSH_PASS}" ssh -p 670 "${SSH_USER}@${SSH_HOST}" "${REMOTE_SCRIPT}"
