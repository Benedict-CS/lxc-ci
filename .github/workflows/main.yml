name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGISTRY_DOMAIN: registry.benedicttiong.site
  IMAGE_NAME: test-service
  API_HOST: 140.113.194.249 # 建議將此 IP 也放入 Secret
  DEVICE_ID: "test-1"

jobs:
  #====================================================
  # CI Job: Build and Push Docker Image (你的版本)
  #====================================================
  CI Pipeline:
    name: 1. Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      IMAGE_URL: ${{ steps.meta.outputs.IMAGE_URL }}
      IMAGE_TAG: ${{ steps.meta.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # ⚠️ 注意：你需要將 Docker Registry 的帳號密碼設為 Secret
      - name: Login to Private Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOMAIN }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Generate Image Metadata
        id: meta
        run: |
          VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IMAGE_URL=${{ env.REGISTRY_DOMAIN }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "Generated Tag: $VERSION"

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.IMAGE_URL }}:${{ steps.meta.outputs.IMAGE_TAG }}
          provenance: false

  #====================================================
  # CD Job: Deploy to Device via USP Controller
  #====================================================
  CD Pipeline:
    name: 2. Deploy to AP via USP API
    needs: CI Pipeline
    runs-on: ubuntu-latest

    steps:
      - name: 1. Get Authentication Token
        id: auth
        run: |
          TOKEN=$(curl --location --request PUT 'http://${{ env.API_HOST }}/api/auth/login' \
            --header 'Content-Type: application/json' \
            --silent \
            --data-raw '{
                "email": "test@gmail.com",
                "password": "test"
            }' | tr -d '"')
          echo "Successfully retrieved auth token."
          echo "TOKEN=$TOKEN" >> $GITHUB_OUTPUT

      - name: 2. Uninstall All Existing Containers
        id: uninstall
        env:
          API_TOKEN: ${{ steps.auth.outputs.TOKEN }}
        run: |
          echo "--- Finding existing LXC instances on device: ${{ env.DEVICE_ID }} ---"
          
          # 步驟 A: 取得所有 Device.LCM.LXC. 的實例路徑
          INSTANCES=$(curl --location \
            --request PUT 'http://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/get' \
            --header 'Content-Type: application/json' \
            --header "Authorization: ${API_TOKEN}" \
            --silent \
            --data-raw '{
                "param_paths": ["Device.LCM.LXC."],
                "max_depth": 1
            }' | jq -r '.req_path_results[0].resolved_path_results[].resolved_path')

          if [ -z "$INSTANCES" ]; then
            echo "No existing LXC instances found to uninstall. Skipping."
          else
            echo "Found instances to delete:"
            echo "$INSTANCES"
            
            # 步驟 B: 迭代所有路徑，並一一刪除
            for path in $INSTANCES; do
              echo "--- Deleting instance: $path ---"
              curl --location \
                --request PUT 'http://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/del' \
                --header 'Content-Type: application/json' \
                --header "Authorization: ${API_TOKEN}" \
                --data-raw "{
                    \"allow_partial\": true,
                    \"obj_paths\": [\"$path\"]
                }"
              sleep 2 # 每個刪除操作後稍作等待
            done
          fi
          
          echo "--- Uninstall phase complete. Waiting for device to process... ---"
          sleep 5 # 給予設備足夠時間完成背景的 uninstall ubus 指令

      - name: 3. Install New Container
        id: install
        env:
          API_TOKEN: ${{ steps.auth.outputs.TOKEN }}
        run: |
          echo "--- Sending Add command to trigger new installation ---"
          RESPONSE=$(curl --location \
            --request PUT 'http://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/add' \
            --header 'Content-Type: application/json' \
            --header "Authorization: ${API_TOKEN}" \
            --data-raw '{
                "allow_partial": true,
                "create_objs": [{
                    "obj_path": "Device.LCM.LXC."
                }]
            }')
          
          echo "Device response: $RESPONSE"
          # 簡單的成功檢查
          if [[ "$RESPONSE" == *"OperSuccess"* ]]; then
            echo "Successfully triggered installation."
          else
            echo "Failed to trigger installation!"
            exit 1
          fi
          
          echo "--- Installation triggered. Waiting for container to start... ---"
          sleep 20 # 給予設備時間下載 image 並啟動容器