name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGISTRY_DOMAIN: registry.benedicttiong.site
  IMAGE_NAME: test-service
  API_HOST: controller.benedicttiong.site
  DEVICE_ID: "test-1"
  BLUE_IP: "192.168.3.100"
  GREEN_IP: "192.168.3.101"

jobs:
  CI-Pipeline:
    name: 1. Build & Push Image
    runs-on: ubuntu-latest
    outputs:
      IMAGE_URL: ${{ steps.meta.outputs.IMAGE_URL }}
      VERSION: ${{ steps.meta.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - id: meta
        run: |
          VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IMAGE_URL=${{ env.REGISTRY_DOMAIN }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.IMAGE_URL }}:${{ steps.meta.outputs.VERSION }}
          provenance: false

  CD-Pipeline:
    name: 2. Deploy (Blue-Green)
    needs: CI-Pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Get Auth Token
        id: auth
        run: |
          set -o pipefail
          TEMP_TOKEN=$(curl --location --request PUT 'https://${{ env.API_HOST }}/api/auth/login' \
            --header 'Content-Type: application/json' \
            --silent --connect-timeout 10 --max-time 30 \
            --data-raw '{"email": "test@gmail.com", "password": "test"}' | tr -d '"')
          if [ -z "$TEMP_TOKEN" ]; then echo "::error::Auth token is empty."; exit 1; fi
          echo "::add-mask::$TEMP_TOKEN"
          echo "TOKEN=$TEMP_TOKEN" >> $GITHUB_ENV

      - name: Install New Version (Green)
        id: install_green
        run: |
          IMAGE_URL_WITH_PREFIX="docker://${{ needs.CI-Pipeline.outputs.IMAGE_URL }}:${{ needs.CI-Pipeline.outputs.VERSION }}"
          ALIAS="green-${{ needs.CI-Pipeline.outputs.VERSION }}"
          JSON_PAYLOAD=$(cat <<EOF
          { "allow_partial": true, "create_objs": [{"obj_path": "Device.LCM.LXC.", "param_settings": [{"param": "Alias", "value": "$ALIAS", "required": true}, {"param": "ImageURL", "value": "$IMAGE_URL_WITH_PREFIX", "required": true}]}]}
          EOF
          )
          # MODIFIED: Removed --fail
          curl --location --request PUT 'https://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/add' \
            --header 'Content-Type: application/json' \
            --header "Authorization: ${TOKEN}" \
            --silent --connect-timeout 10 --max-time 60 \
            --data-raw "$JSON_PAYLOAD"
          sleep 15

      - name: Switch Traffic to Green
        id: switch_traffic
        run: |
          GREEN_IP="${{ env.GREEN_IP }}"
          JSON_PAYLOAD=$(cat <<EOF
          { "command": "Device.SwitchActiveVersion()", "input_args": { "TargetIP": "$GREEN_IP" } }
          EOF
          )
          # MODIFIED: Removed --fail
          curl --location --request PUT 'https://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/operate' \
            --header 'Content-Type: application/json' \
            --header "Authorization: ${TOKEN}" \
            --silent --connect-timeout 10 --max-time 30 \
            --data-raw "$JSON_PAYLOAD"
      
      - name: Clean Up Old Version (Blue) - Skipped
        if: always()
        run: |
          echo "Skipping cleanup of old version (Blue: ${{ env.BLUE_IP }}) for now to allow rollback."
          sleep 5