name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGISTRY_DOMAIN: registry.benedicttiong.site
  IMAGE_NAME: test-service
  API_HOST: controller.benedicttiong.site
  DEVICE_ID: "test-1"

jobs:
  CI-Pipeline:
    name: 1. Build & Push Image
    runs-on: ubuntu-latest
    outputs:
      IMAGE_URL: ${{ steps.meta.outputs.IMAGE_URL }}
      VERSION: ${{ steps.meta.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - id: meta
        run: |
          VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IMAGE_URL=${{ env.REGISTRY_DOMAIN }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.IMAGE_URL }}:${{ steps.meta.outputs.VERSION }}
          provenance: false

  CD-Pipeline:
    name: 2. Deploy (Recreate)
    needs: CI-Pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Get Auth Token
        id: auth
        run: |
          set -o pipefail
          TEMP_TOKEN=$(curl --location --request PUT 'https://${{ env.API_HOST }}/api/auth/login' \
            --header 'Content-Type: application/json' \
            --fail --silent --connect-timeout 10 --max-time 30 \
            --data-raw '{"email": "test@gmail.com", "password": "test"}' | tr -d '"')
          if [ -z "$TEMP_TOKEN" ]; then echo "::error::Auth token is empty."; exit 1; fi
          echo "::add-mask::$TEMP_TOKEN"
          echo "TOKEN=$TEMP_TOKEN" >> $GITHUB_ENV

      - name: Uninstall Existing Containers
        id: uninstall
        run: |
          API_RESPONSE=$(curl --location --request PUT 'https://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/get' \
            --header 'Content-Type: application/json' --header "Authorization: ${TOKEN}" \
            --fail-with-body --connect-timeout 10 --max-time 30 \
            --data-raw '{"param_paths": ["Device.LCM.LXC."], "max_depth": 1}')
          CURL_EXIT_CODE=$?
          if [ $CURL_EXIT_CODE -ne 0 ] && [ $CURL_EXIT_CODE -ne 22 ]; then
            echo "::error::Failed to get instances. Curl exit code: $CURL_EXIT_CODE. Response: $API_RESPONSE"
            exit 1
          fi
          INSTANCES=$(echo "$API_RESPONSE" | jq -r '(.req_path_results[0].resolved_path_results // [])[]?.resolved_path // empty' || true)
          if [ -n "$INSTANCES" ]; then
            echo "$INSTANCES" | while IFS= read -r path; do
              [ -z "$path" ] && continue
              curl --location --request PUT 'https://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/del' \
                --header 'Content-Type: application/json' --header "Authorization: ${TOKEN}" \
                --fail --silent --connect-timeout 10 --max-time 30 \
                --data-raw "{\"allow_partial\": true, \"obj_paths\": [\"$path\"]}"
              sleep 2
            done
          fi
          sleep 5

      - name: Install New Container
        id: install
        run: |
          IMAGE_URL_WITH_PREFIX="docker://${{ needs.CI-Pipeline.outputs.IMAGE_URL }}:${{ needs.CI-Pipeline.outputs.VERSION }}"
          ALIAS="ci-cd-${{ needs.CI-Pipeline.outputs.VERSION }}"
          JSON_PAYLOAD=$(cat <<EOF
          {
            "allow_partial": true,
            "create_objs": [{
              "obj_path": "Device.LCM.LXC.",
              "param_settings": [
                {"param": "Alias", "value": "$ALIAS", "required": true},
                {"param": "ImageURL", "value": "$IMAGE_URL_WITH_PREFIX", "required": true}
              ]
            }]
          }
          EOF
          )
          RESPONSE=$(curl --location --request PUT 'https://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/add' \
            --header 'Content-Type: application/json' --header "Authorization: ${TOKEN}" \
            --fail --silent --connect-timeout 10 --max-time 60 \
            --data-raw "$JSON_PAYLOAD")
          CURL_EXIT_CODE=$?
          if [ $CURL_EXIT_CODE -ne 0 ] || [[ "$RESPONSE" != *"OperSuccess"* ]]; then
            echo "::error::Install failed. Exit code: $CURL_EXIT_CODE. Response: $RESPONSE"
            exit 1
          fi
          sleep 5