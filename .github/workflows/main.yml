name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGISTRY_DOMAIN: registry.benedicttiong.site
  IMAGE_NAME: test-service
  API_HOST: controller.benedicttiong.site # 建議將此 IP 也放入 Secret
  DEVICE_ID: "test-1"

jobs:
  #====================================================
  # CI Job: Build and Push Docker Image (你的版本)
  #====================================================
  CI-Pipeline:
    name: 1. CI-Pipeline
    runs-on: ubuntu-latest
    outputs:
      IMAGE_URL: ${{ steps.meta.outputs.IMAGE_URL }}
      IMAGE_TAG: ${{ steps.meta.outputs.IMAGE_TAG }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Generate Image Metadata
        id: meta
        run: |
          VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IMAGE_URL=${{ env.REGISTRY_DOMAIN }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "Generated Tag: $VERSION"

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.IMAGE_URL }}:${{ steps.meta.outputs.VERSION }}
          provenance: false

  #====================================================
  # CD Job: Deploy to Device via USP Controller
  #====================================================
  CD-Pipeline:
    name: 2. CD-Pipeline
    needs: CI-Pipeline # 恢復依賴關係
    runs-on: ubuntu-latest

    steps:
      - name: 1. Get Authentication Token and Set Env Var
        id: auth
        run: |
          set -o pipefail # 讓 pipeline 的結束代碼是第一個失敗指令的代碼

          echo "Attempting to retrieve token using HTTPS and domain name..."

          # 使用 HTTPS 和網域名稱，直接填入帳密 (或改回 secrets)
          TEMP_TOKEN=$(curl --location --request PUT 'https://${{ env.API_HOST }}/api/auth/login' \
            --header 'Content-Type: application/json' \
            --verbose \
            --fail \
            --connect-timeout 10 \
            --max-time 30 \
            --data-raw '{
                "email": "test@gmail.com", 
                "password": "test"
            }' | tee /dev/stderr | tr -d '"')

          CURL_EXIT_CODE=$?
          echo "Raw curl output processed. Exit code: $CURL_EXIT_CODE"

          if [ $CURL_EXIT_CODE -ne 0 ]; then
             echo "::error::curl command failed with exit code $CURL_EXIT_CODE. Check API connectivity or curl output above."
             exit 1
          fi

          if [ -z "$TEMP_TOKEN" ]; then
            echo "::error::Failed to retrieve authentication token (Token is empty). Check API response."
            exit 1
          fi

          echo "Successfully retrieved auth token (masked)."
          echo "::add-mask::$TEMP_TOKEN"
          echo "TOKEN=$TEMP_TOKEN" >> $GITHUB_ENV # 寫入 GITHUB_ENV

      - name: 2. Uninstall All Existing Containers
        id: uninstall
        run: |
          echo "--- Finding existing LXC instances on device: ${{ env.DEVICE_ID }} ---"

          # 直接使用 $TOKEN 環境變數，使用 HTTPS
          # MODIFIED: Removed comment after --fail \
          INSTANCES=$(curl --location \
            --request PUT 'https://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/get' \
            --header 'Content-Type: application/json' \
            --header "Authorization: ${TOKEN}" \
            --silent \
            --fail \
            --data-raw '{
                "param_paths": ["Device.LCM.LXC."],
                "max_depth": 1
            }' | jq -r '.req_path_results[0].resolved_path_results[].resolved_path')
          
          CURL_EXIT_CODE=$?
          if [ $CURL_EXIT_CODE -ne 0 ] && [ $CURL_EXIT_CODE -ne 22 ]; then # 忽略 404 (找不到) 錯誤 (HTTP 404 對應 curl code 22)
             echo "::error::Failed to get instances. Curl exit code: $CURL_EXIT_CODE."
             exit 1
          fi

          if [ -z "$INSTANCES" ]; then
            echo "No existing LXC instances found to uninstall. Skipping."
          else
            echo "Found instances to delete:"
            echo "$INSTANCES"

            for path in $INSTANCES; do
              echo "--- Deleting instance: $path ---"
              # MODIFIED: Removed comment after --fail \
              curl --location \
                --request PUT 'https://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/del' \
                --header 'Content-Type: application/json' \
                --header "Authorization: ${TOKEN}" \
                --fail \
                --data-raw "{
                    \"allow_partial\": true,
                    \"obj_paths\": [\"$path\"]
                }"
              DEL_EXIT_CODE=$?
               if [ $DEL_EXIT_CODE -ne 0 ]; then
                  echo "::warning::Failed to delete instance $path (Exit code: $DEL_EXIT_CODE). Continuing..."
                  # 不中止，繼續刪除下一個
               fi
              sleep 2 # 增加等待時間
            done
          fi

          echo "--- Uninstall phase complete. Waiting for device to process... ---"
          sleep 5 # 增加等待時間

      - name: 3. Install New Container
        id: install
        run: |
          echo "--- Sending Add command to trigger new installation ---"

          # 直接使用 $TOKEN 環境變數，使用 HTTPS
          # MODIFIED: Removed comment after --fail \
          RESPONSE=$(curl --location \
            --request PUT 'https://${{ env.API_HOST }}/api/device/${{ env.DEVICE_ID }}/stomp/add' \
            --header 'Content-Type: application/json' \
            --header "Authorization: ${TOKEN}" \
            --fail \
            --data-raw '{
                "allow_partial": true,
                "create_objs": [{
                    "obj_path": "Device.LCM.LXC."
                }]
            }')

          CURL_EXIT_CODE=$?
          echo "Device response: $RESPONSE"

          if [ $CURL_EXIT_CODE -ne 0 ]; then
             echo "::error::Add command failed. Curl exit code: $CURL_EXIT_CODE."
             exit 1
          fi

          if [[ "$RESPONSE" == *"OperSuccess"* ]]; then
            echo "Successfully triggered installation."
          else
            echo "::error::Failed to trigger installation! Response did not contain OperSuccess: $RESPONSE"
            exit 1
          fi

          echo "--- Installation triggered. Waiting for container to start... ---"
          sleep 5
